import random
import time
import json

class SagarisAI:
    def __init__(self):
        self.threshold = 1000  # Set a threshold for anomaly detection

    def monitor_traffic(self):
        # Simulate monitoring network traffic
        print("Monitoring network traffic for anomalies...\n")
        traffic_data = [random.randint(500, 1500) for _ in range(10)]
        return traffic_data

    def detect_anomalies(self, traffic_data):
        anomalies = []
        for i, data in enumerate(traffic_data):
            if data > self.threshold:
                anomalies.append({"index": i, "value": data})
        return anomalies

    def respond_to_threats(self, anomalies):
        if anomalies:
            print("Threat detected! Executing response...\n")
            for anomaly in anomalies:
                print(f"Quarantining endpoint with abnormal data point: {anomaly['value']} at index {anomaly['index']}")
        else:
            print("No threats detected.\n")

    def generate_report(self, anomalies):
        report = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "anomalies_detected": len(anomalies),
            "anomaly_data": anomalies
        }
        with open("sagarisai_report.json", "w") as report_file:
            json.dump(report, report_file, indent=4)
        print(f"\nReport generated: {report}\n")

    def run(self):
        traffic_data = self.monitor_traffic()
        print(f"Traffic Data: {traffic_data}\n")
        anomalies = self.detect_anomalies(traffic_data)
        self.respond_to_threats(anomalies)
        self.generate_report(anomalies)

if __name__ == "__main__":
    sagarisai = SagarisAI()
    sagarisai.run()
